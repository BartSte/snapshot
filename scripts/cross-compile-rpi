#!/usr/bin/env bash
set -euo pipefail

this_dir=$(dirname "$(readlink -f "$0")")
root=$(dirname "$this_dir")
cmd="main"
ip=""
pw=""
username=""
base_dir="$this_dir/../rpi"
qt_host_source="$base_dir/qt-hostsrc"
qt_host_build="$base_dir/qt-hostbuild"
qt_host="$base_dir/qt-host"
ffmpeg_hostsrc="$base_dir/ffmpeg-hostsrc"
ffmpeg_host="$base_dir/ffmpeg-host"
toolchain_file="$this_dir/../cmake/toolchain.cmake"
verbose=false
usage="Usage: cross-compile-rpi [OPTIONS] <username> <ip>

Cross compile Qt for Raspberry Pi. The script will install the necessary 
dependencies, create a sysroot, configure the build, build Qt, and sync the
build to the Raspberry Pi.

Options:
  -c, --cmd <command>           Only run a subset of the script. Valid commands
                                are: install, sysroot, build_qt_host, build_qt_pi 
  --base-dir <dir>              Base directory for the build (default: $base_dir)
  --qt-host <dir>               Qt host directory (default: $qt_host)
  --qt-hostsrc <dir>            Qt host source directory (default: $qt_host_source)
  --qt-hostbuild <dir>          Qt host build directory (default: $qt_host_build)
  -t, --toolchain-file <file>   Toolchain file (default: $toolchain_file)
  -v, --verbose                 Enable verbose output
  -p, --pw <password>           Password for the Raspberry Pi. This will use
                                sshpass to pass the password to rsync. This is
                                not secure as your password will processed as
                                plain text.
  -h, --help                    Display this message and exit
"

log() {
    # No args are passed, read from stdin
    local msg
    if [ $# -eq 0 ]; then
        msg=$(cat)
    else
        msg="$1"
    fi
    if [ "$verbose" = true ]; then
        echo "$msg" >&2
    fi
}

parse_args() {
    while [ $# -gt 0 ]; do
        case $1 in
        -b | --base-dir)
            base_dir=$2
            shift
            ;;
        -q | --qt-host)
            qt_host=$2
            shift
            ;;
        --qt-hostsrc)
            qt_host_source=$2
            shift
            ;;
        --qt-hostbuild)
            qt_host_build=$2
            shift
            ;;
        -t | --toolchain-file)
            toolchain_file=$2
            shift
            ;;
        -p | --pw)
            hash /usr/bin/sshpass 2>/dev/null || {
                echo "sshpass is required for password automation"
                exit 1
            }
            pw=$2
            shift
            ;;
        -v | --verbose)
            verbose=true
            ;;
        -c | --cmd)
            cmd=$2
            shift
            ;;
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        *)
            if [ -z "$username" ]; then
                username=$1
            elif [ -z "$ip" ]; then
                ip=$1
            else
                echo "Invalid argument: $1"
                echo "$usage"
                exit 1
            fi
            ;;
        esac
        shift
    done
}

make_dirs() {
    local base_dir dir dirs
    base_dir=$1

    log "Creating directories structure in $base_dir"
    dirs="rpi-sysroot rpi-sysroot/usr rpi-sysroot/opt qt-raspi qtpi-build qt-host qt-hostbuild qt-hostsrc ffmpeg-hostsrc ffmpeg-host"
    for dir in $dirs; do
        mkdir -p "$base_dir"/"$dir"
    done
}

install() {
    local package_manager
    log "Installing cross compile dependencies"
    package_manager=$(bash "$this_dir"/helpers/get-package-manager)
    "$root/scripts/helpers/${package_manager}/install-project-deps"
    "$this_dir/helpers/$package_manager/install-cross-compile-deps"
}

sysroot() {
    if [ -z "$username" ] || [ -z "$ip" ]; then
        log "No ip and/or paassword provided. Assuming sysroot is created manually."
        log "Running symlinks to fix symlinks in sysroot"
        sudo symlinks -rc "$base_dir"/rpi-sysroot
    else
        _make_sysroot_rsync "$base_dir" "$username" "$ip"
    fi
}

_make_sysroot_rsync() {
    local base_dir username ip
    base_dir=$1
    username=$2
    ip=$3

    log "Creating sysroot in $base_dir/rpi-sysroot using rsync"

    cd "$base_dir" || exit 1

    if [ -n "$pw" ]; then
        pw_insert="--rsh=\"/usr/bin/sshpass -p $pw ssh -o StrictHostKeyChecking=no -l $username\""
    fi
    rsync_cmd="sudo rsync -avzS --delete --rsync-path=\"rsync\" $pw_insert ${username}@${ip}"

    eval "$rsync_cmd:/lib/* rpi-sysroot/lib" || true
    eval "$rsync_cmd:/usr/include/* rpi-sysroot/usr/include" || true
    eval "$rsync_cmd:/usr/lib/* rpi-sysroot/usr/lib" || true
    eval "$rsync_cmd:/opt/vc rpi-sysroot/opt/vc" || true
    cd - || exit 1

    sudo symlinks -rc "$base_dir"/rpi-sysroot
}

build_qt_host() {
    if _not_empty "$qt_host"; then
        log "Qt host directory is not empty. Skipping build"
        return
    fi
    "$this_dir"/build-ffmpeg --shared -s "$ffmpeg_hostsrc" -i "$ffmpeg_host"

    # qtwayland is excluded on the raspberry pi build for now
    "$this_dir"/build-qt --shared-build -s "$qt_host_source" -i "$qt_host" --ffmpeg-dir "$ffmpeg_host" --submodules qtbase,qtmultimedia
}

_not_empty() {
    [ -d "$1" ] && [ -n "$(ls -A "$1")" ]
}

build_qt_pi() {
    _configure_build_pi "$base_dir" "$qt_host" "$toolchain_file"
    cmake --build "$base_dir/qtpi-build" --parallel 4
    cmake --install "$base_dir/qtpi-build"
    _sync_build "$base_dir" "$username" "$ip"
}

_configure_build_pi() {
    local base_dir qt_host toolchain_file
    base_dir=$1
    qt_host=$2
    toolchain_file=$3

    log "Configuring Qt build in $base_dir/qt-hostbuild"

    export CC=aarch64-linux-gnu-gcc
    export CXX=aarch64-linux-gnu-g++
    export TARGET_SYSROOT="$base_dir"/rpi-sysroot
    export CMAKE_INCLUDE_PATH=$root/rpi/rpi-sysroot/usr/lib/aarch64-linux-gnu/glib-2.0/include

    "$qt_host_source/6.6.1/Src/configure" \
        -release \
        -nomake examples \
        -nomake tests \
        -no-gstreamer \
        -submodules qtbase,qtmultimedia,qtwayland \
        -qt-host-path "$qt_host" \
        -extprefix "$base_dir"/qt-raspi \
        -prefix /usr/local/qt6 \
        -device linux-rasp-pi4-aarch64 \
        -device-option CROSS_COMPILE=aarch64-linux-gnu- \
        -- \
        -B "$base_dir"/qtpi-build \
        -Wdev \
        -DFFMPEG_DIR="$root/3rdparty/ffmpeg" \
        -DCMAKE_TOOLCHAIN_FILE="$toolchain_file" \
        -DQT_FEATURE_xcb=ON -DFEATURE_xcb_xlib=ON -DQT_FEATURE_xlib=ON
}

_sync_build() {
    local base_dir username ip
    base_dir=$1
    username=$2
    ip=$3

    log "Syncing build to Raspberry Pi"
    rsync -avz --rsync-path="sudo rsync" "$base_dir"/qt-raspi/* "$username"@"$ip":/usr/local/qt6
}

main() {
    install
    sysroot
    build_qt_host
    build_qt_pi
}

parse_args "$@"
make_dirs "$base_dir"
eval "$cmd"
